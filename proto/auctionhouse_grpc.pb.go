// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuctionhouseServiceClient is the client API for AuctionhouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionhouseServiceClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (AuctionhouseService_PublishClient, error)
	Broadcast(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (AuctionhouseService_BroadcastClient, error)
}

type auctionhouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionhouseServiceClient(cc grpc.ClientConnInterface) AuctionhouseServiceClient {
	return &auctionhouseServiceClient{cc}
}

func (c *auctionhouseServiceClient) Publish(ctx context.Context, opts ...grpc.CallOption) (AuctionhouseService_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuctionhouseService_ServiceDesc.Streams[0], "/proto.AuctionhouseService/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionhouseServicePublishClient{stream}
	return x, nil
}

type AuctionhouseService_PublishClient interface {
	Send(*ClientMessage) error
	Recv() (*StatusMessage, error)
	grpc.ClientStream
}

type auctionhouseServicePublishClient struct {
	grpc.ClientStream
}

func (x *auctionhouseServicePublishClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *auctionhouseServicePublishClient) Recv() (*StatusMessage, error) {
	m := new(StatusMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auctionhouseServiceClient) Broadcast(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (AuctionhouseService_BroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuctionhouseService_ServiceDesc.Streams[1], "/proto.AuctionhouseService/Broadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionhouseServiceBroadcastClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuctionhouseService_BroadcastClient interface {
	Recv() (*ChatRoomMessages, error)
	grpc.ClientStream
}

type auctionhouseServiceBroadcastClient struct {
	grpc.ClientStream
}

func (x *auctionhouseServiceBroadcastClient) Recv() (*ChatRoomMessages, error) {
	m := new(ChatRoomMessages)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuctionhouseServiceServer is the server API for AuctionhouseService service.
// All implementations must embed UnimplementedAuctionhouseServiceServer
// for forward compatibility
type AuctionhouseServiceServer interface {
	Publish(AuctionhouseService_PublishServer) error
	Broadcast(*Subscription, AuctionhouseService_BroadcastServer) error
	mustEmbedUnimplementedAuctionhouseServiceServer()
}

// UnimplementedAuctionhouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionhouseServiceServer struct {
}

func (UnimplementedAuctionhouseServiceServer) Publish(AuctionhouseService_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedAuctionhouseServiceServer) Broadcast(*Subscription, AuctionhouseService_BroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedAuctionhouseServiceServer) mustEmbedUnimplementedAuctionhouseServiceServer() {}

// UnsafeAuctionhouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionhouseServiceServer will
// result in compilation errors.
type UnsafeAuctionhouseServiceServer interface {
	mustEmbedUnimplementedAuctionhouseServiceServer()
}

func RegisterAuctionhouseServiceServer(s grpc.ServiceRegistrar, srv AuctionhouseServiceServer) {
	s.RegisterService(&AuctionhouseService_ServiceDesc, srv)
}

func _AuctionhouseService_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuctionhouseServiceServer).Publish(&auctionhouseServicePublishServer{stream})
}

type AuctionhouseService_PublishServer interface {
	Send(*StatusMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type auctionhouseServicePublishServer struct {
	grpc.ServerStream
}

func (x *auctionhouseServicePublishServer) Send(m *StatusMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *auctionhouseServicePublishServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuctionhouseService_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuctionhouseServiceServer).Broadcast(m, &auctionhouseServiceBroadcastServer{stream})
}

type AuctionhouseService_BroadcastServer interface {
	Send(*ChatRoomMessages) error
	grpc.ServerStream
}

type auctionhouseServiceBroadcastServer struct {
	grpc.ServerStream
}

func (x *auctionhouseServiceBroadcastServer) Send(m *ChatRoomMessages) error {
	return x.ServerStream.SendMsg(m)
}

// AuctionhouseService_ServiceDesc is the grpc.ServiceDesc for AuctionhouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionhouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuctionhouseService",
	HandlerType: (*AuctionhouseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _AuctionhouseService_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Broadcast",
			Handler:       _AuctionhouseService_Broadcast_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "auctionhouse.proto",
}

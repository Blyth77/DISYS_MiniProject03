/* 
  Generate-files:
    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative ChittyChat.proto
*/

syntax = "proto3";
package proto;

option go_package = "./proto"; 


service AuctionhouseService {
  rpc Result(stream QueryMessage) returns (stream OutcomeMessage) {} // publish sender en besked fra client // unary
  rpc Bid(stream BidMessage) returns (stream StatusMessage) {} // Broadcast -- subcribe - server -> client via msgQueue
}

// ack =  given a bid, returns an outcome among fail, success or exception


// Send a new bid + subscribing
message BidMessage {
  int32 clientId = 1;
  int32 amount = 2;
}


// Highest bidder info - highest bid, and bidder 
message OutcomeMessage {
  string auctionStatusMessage = 1;
  int32 highestBid = 2; 
  int32 highestBidderID = 3;
  string item = 4;
}

// Message for prompting asking for highest bidder
message QueryMessage {
  int32 clientId = 1;

}

// Was bid successful? 
message StatusMessage {
  Status status = 1; 
}

enum Status {
  SUCCESS = 0;
  FAIL = 1;
  EXCEPTION = 2;
}

